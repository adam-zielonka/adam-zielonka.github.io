import InputHistory from './InputHistory'

describe('InputHistory', () => {
  describe('start with empty history', () => {
    it('Create empty history, returns empty strings', () => {
      const history = new InputHistory()
      expect(history.value).toBe('')
    })
    it('Create empty history, history up, returns empty strings', () => {
      const history = new InputHistory()
      history.historyUp()
      expect(history.value).toBe('')
    })
    it('Create empty history, history down, returns empty strings', () => {
      const history = new InputHistory()
      history.historyDown()
      expect(history.value).toBe('')
    })
    it('Create empty history, set value, returns the same value', () => {
      const history = new InputHistory()
      ;['test','','!@#$#@%%^%^&*','üòâ‚ù§‚ú®'].forEach(value => {
        history.setValue(value)
        expect(history.value).toBe(value)
      })
    })
    it('Create empty history, set value, addHistory, returns empty strings', () => {
      const history = new InputHistory()
      ;['test','','!@#$#@%%^%^&*','üòâ‚ù§‚ú®'].forEach(value => {
        history.setValue(value)
        history.addHistory()
        expect(history.value).toBe('')
      })
    })
    it('Create empty history, set value, addHistory, up and down, returns correct element', () => {
      const history = new InputHistory()
      ;['test','','!@#$#@%%^%^&*','üòâ‚ù§‚ú®'].forEach(value => {
        history.setValue(value)
        history.addHistory()
        expect(history.value).toBe('')
      })
      history.historyUp()
      expect(history.value).toBe('üòâ‚ù§‚ú®')
      history.historyUp()
      expect(history.value).toBe('!@#$#@%%^%^&*')
      history.historyUp()
      expect(history.value).toBe('test')
      history.historyUp()
      expect(history.value).toBe('test')
      history.historyDown()
      expect(history.value).toBe('!@#$#@%%^%^&*')
      history.historyDown()
      expect(history.value).toBe('üòâ‚ù§‚ú®')
      history.historyDown()
      expect(history.value).toBe('')
      history.historyDown()
      expect(history.value).toBe('')
      history.historyUp()
      expect(history.value).toBe('üòâ‚ù§‚ú®')
      history.historyUp()
      expect(history.value).toBe('!@#$#@%%^%^&*')
      history.setValue('!@#$#@%%^%^&*123456789')
      expect(history.value).toBe('!@#$#@%%^%^&*123456789')
      history.historyDown()
      expect(history.value).toBe('!@#$#@%%^%^&*123456789')
      history.historyUp()
      expect(history.value).toBe('üòâ‚ù§‚ú®')
    })
  })
  describe('start with history', () => {
    const startedHistory = ['whomai', 'help']
    it('Create filed history, returns empty strings', () => {
      const history = new InputHistory(startedHistory)
      expect(history.value).toBe('')
    })
    it('Create filed history, history up, returns empty strings', () => {
      const history = new InputHistory(startedHistory)
      history.historyUp()
      expect(history.value).toBe('help')
    })
    it('Create filed history, history down, returns empty strings', () => {
      const history = new InputHistory(startedHistory)
      history.historyDown()
      expect(history.value).toBe('')
    })
    it('Create filed history, set value, returns the same value', () => {
      const history = new InputHistory(startedHistory)
      ;['test','','!@#$#@%%^%^&*','üòâ‚ù§‚ú®'].forEach(value => {
        history.setValue(value)
        expect(history.value).toBe(value)
      })
    })
    it('Create filed history, set value, addHistory, returns empty strings', () => {
      const history = new InputHistory(startedHistory)
      ;['test','','!@#$#@%%^%^&*','üòâ‚ù§‚ú®'].forEach(value => {
        history.setValue(value)
        history.addHistory()
        expect(history.value).toBe('')
      })
    })
    it('Create filed history, set value, addHistory, up and down, returns ', () => {
      const history = new InputHistory(startedHistory)
      ;['test','','!@#$#@%%^%^&*','üòâ‚ù§‚ú®'].forEach(value => {
        history.setValue(value)
        history.addHistory()
        expect(history.value).toBe('')
      })
      history.historyUp()
      expect(history.value).toBe('üòâ‚ù§‚ú®')
      history.historyUp()
      expect(history.value).toBe('!@#$#@%%^%^&*')
      history.historyUp()
      expect(history.value).toBe('test')
      history.historyUp()
      expect(history.value).toBe('help')
      history.historyDown()
      expect(history.value).toBe('test')
      history.historyDown()
      expect(history.value).toBe('!@#$#@%%^%^&*')
      history.historyDown()
      expect(history.value).toBe('üòâ‚ù§‚ú®')
      history.historyDown()
      expect(history.value).toBe('')
      history.historyUp()
      expect(history.value).toBe('üòâ‚ù§‚ú®')
      history.historyUp()
      expect(history.value).toBe('!@#$#@%%^%^&*')
      history.setValue('!@#$#@%%^%^&*123456789')
      expect(history.value).toBe('!@#$#@%%^%^&*123456789')
      history.historyDown()
      expect(history.value).toBe('!@#$#@%%^%^&*123456789')
      history.historyUp()
      expect(history.value).toBe('üòâ‚ù§‚ú®')
    })
  })
})
